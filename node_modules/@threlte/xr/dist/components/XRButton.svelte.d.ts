/// <reference types="webxr" />
import { SvelteComponent } from "svelte";
import type { HTMLButtonAttributes } from 'svelte/elements';
declare const __propDef: {
    props: HTMLButtonAttributes & {
        mode: XRSessionMode;
        sessionInit?: (XRSessionInit & {
            domOverlay?: {
                root: HTMLElement;
            } | undefined;
        }) | undefined;
        force?: "enter" | "exit" | undefined;
        styled?: boolean | undefined;
    };
    events: {
        click: CustomEvent<{
            state: 'unsupported' | 'insecure' | 'blocked' | 'supported';
            nativeEvent: MouseEvent;
        }>;
        error: CustomEvent<Error>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export type XrButtonProps = typeof __propDef.props;
export type XrButtonEvents = typeof __propDef.events;
export type XrButtonSlots = typeof __propDef.slots;
/**
 * `<XRButton />` is an HTML `<button />` that can be used to init and
 * display info about your WebXR session. This is aliased by `ARButton` and
 * `VRButton` with sensible session defaults.
 *
 * ```svelte
 * <XRButton
 *   mode={'immersive-ar' | 'immersive-vr' | 'inline'}
 *   sessionInit={{
 *     optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers']
 *   }}
 *   force={'enter' | 'exit' | undefined}
 *   styled={'true' | 'false'}
 *   on:error={(event) => {}}
 *   on:click={(event) => {}}
 * />
 * ```
 */
export default class XrButton extends SvelteComponent<XrButtonProps, XrButtonEvents, XrButtonSlots> {
}
export {};
