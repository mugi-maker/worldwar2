import type { Mesh, Raycaster, Intersection } from 'three';
import type { CurrentWritable, createRawEventDispatcher } from '@threlte/core';
export type ComputeFunction = (context: Context, handContext: HandContext) => void;
export interface Context {
    interactiveObjects: Mesh[];
    surfaces: Map<string, Mesh>;
    blockers: Map<string, Mesh>;
    dispatchers: WeakMap<Mesh, ReturnType<typeof createRawEventDispatcher>>;
    raycaster: Raycaster;
    compute: ComputeFunction;
}
export interface HandContext {
    hand: 'left' | 'right';
    enabled: CurrentWritable<boolean>;
    active: CurrentWritable<boolean>;
    hovered: CurrentWritable<Intersection | undefined>;
}
export declare const getHandContext: (hand: 'left' | 'right') => HandContext;
export declare const setHandContext: (hand: 'left' | 'right', context: HandContext) => void;
export declare const getTeleportContext: () => Context;
export declare const setTeleportContext: (context: Context) => void;
