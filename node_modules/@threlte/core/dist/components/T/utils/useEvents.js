import { onMount } from 'svelte';
import { get_current_component } from 'svelte/internal';
import { writable } from 'svelte/store';
import { createRawEventDispatcher } from '../../../lib/createRawEventDispatcher';
import { watch } from '../../../lib/storeUtils';
/**
 * Typeguard to check if a value is extending THREE.EventDispatcher
 * @param value
 * @returns
 */
const isEventDispatcher = (value) => {
    return !!value?.addEventListener;
};
export const useEvents = () => {
    const dispatch = createRawEventDispatcher();
    const component = get_current_component();
    const eventHandlerProxy = (event) => {
        if (event?.type) {
            dispatch(event.type, event);
        }
    };
    const cleanupEventListeners = (ref, events) => {
        if (isEventDispatcher(ref)) {
            events.forEach((eventName) => {
                ref.removeEventListener(eventName, eventHandlerProxy);
            });
        }
    };
    const addEventListeners = (ref, events) => {
        if (isEventDispatcher(ref)) {
            events.forEach((eventName) => {
                ref.addEventListener(eventName, eventHandlerProxy);
            });
        }
    };
    const ref = writable();
    const eventNames = writable([]);
    watch([ref, eventNames], ([$ref, $eventNames]) => {
        addEventListeners($ref, $eventNames);
        return () => cleanupEventListeners($ref, $eventNames);
    });
    // get all event callbacks from component
    onMount(() => {
        eventNames.set(Object.keys(component.$$.callbacks));
    });
    const updateRef = (newRef) => {
        ref.set(newRef);
    };
    return {
        updateRef
    };
};
