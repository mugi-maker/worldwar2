import { SvelteComponent } from "svelte";
import type { XRControllerEvent } from '../types';
declare const __propDef: {
    props: {
        /** Whether the controller should be matched with the left hand. */
        left: true;
        right?: undefined;
        hand?: undefined;
    } | {
        /** Whether the controller should be matched with the right hand. */
        right: true;
        left?: undefined;
        hand?: undefined;
    } | {
        /** Whether the controller should be matched with the left or right hand. */
        hand: 'left' | 'right';
        left?: undefined;
        right?: undefined;
    };
    slots: {
        default: {};
        grip: {};
        'target-ray': {};
        'pointer-ray': {};
        'pointer-cursor': {};
        'teleport-ray': {};
        'teleport-cursor': {};
    };
    events: {
        connected: XRControllerEvent<'connected'>;
        disconnected: XRControllerEvent<'disconnected'>;
        select: XRControllerEvent<'select'>;
        selectstart: XRControllerEvent<'selectstart'>;
        selectend: XRControllerEvent<'selectend'>;
        squeeze: XRControllerEvent<'squeeze'>;
        squeezeend: XRControllerEvent<'squeezeend'>;
        squeezestart: XRControllerEvent<'squeezestart'>;
    };
};
export type ControllerProps = typeof __propDef.props;
export type ControllerEvents = typeof __propDef.events;
export type ControllerSlots = typeof __propDef.slots;
/** `<Controller />` represents a THREE.XRTargetRaySpace, a THREE.XRGripSpace, and a controller model. */
export default class Controller extends SvelteComponent<ControllerProps, ControllerEvents, ControllerSlots> {
}
export {};
