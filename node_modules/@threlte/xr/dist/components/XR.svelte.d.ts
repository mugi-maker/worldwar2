/// <reference types="webxr" />
import { SvelteComponent } from "svelte";
import type { XRSessionEvent } from '../types';
declare const __propDef: {
    props: {
        /**
           * Enables foveated rendering. Default is `1`, the three.js default.
           *
           * 0 = no foveation, full resolution
           *
           * 1 = maximum foveation, the edges render at lower resolution
           */ foveation?: number | undefined;
        /**
           * The target framerate for the XRSystem. Smaller rates give more CPU headroom at the cost of responsiveness.
           * Recommended range is `72`-`120`. Default is unset and left to the device.
           * @note If your experience cannot effectively reach the target framerate, it will be subject to frame reprojection
           * which will halve the effective framerate. Choose a conservative estimate that balances responsiveness and
           * headroom based on your experience.
           * @see https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API/Rendering#refresh_rate_and_frame_rate
           */ frameRate?: number | undefined;
        /** Type of WebXR reference space to use. Default is `local-floor` */ referenceSpace?: XRReferenceSpaceType | undefined;
    };
    slots: {
        default: {};
        fallback: {};
    };
    events: {
        /** Called as an XRSession is requested */
        sessionstart: XRSessionEvent<'sessionstart'>;
        /** Called after an XRSession is terminated */
        sessionend: XRSessionEvent<'sessionend'>;
        /** Called when an XRSession is hidden or unfocused. */
        visibilitychange: globalThis.XRSessionEvent;
        /** Called when available inputsources change */
        inputsourceschange: globalThis.XRSessionEvent;
    };
};
export type XrProps = typeof __propDef.props;
export type XrEvents = typeof __propDef.events;
export type XrSlots = typeof __propDef.slots;
/**
 * `<XR />` is a WebXR manager that configures your scene for XR rendering and interaction.
 *
 * This should be placed within a Threlte `<Canvas />`.
 *
 * ```svelte
 * <XR
 *   foveation={1}
 *   frameRate={90}
 *   referenceSpace='local-floor'
 *   on:sessionstart={(event: XREvent<XRManagerEvent>) => {}}
 *   on:sessionend={(event: XREvent<XRManagerEvent>) => {}}
 *   on:visibilitychange={(event: XREvent<XRSessionEvent>) => {}}
 *   on:inputsourceschange={(event: XREvent<XRSessionEvent>) => {}}
 * />
 * ```
 */
export default class Xr extends SvelteComponent<XrProps, XrEvents, XrSlots> {
}
export {};
